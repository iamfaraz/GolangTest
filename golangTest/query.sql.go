// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package golangTest

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkPhoneExistence = `-- name: CheckPhoneExistence :one
SELECT EXISTS (SELECT 1 FROM users WHERE phone_number = $1)
`

func (q *Queries) CheckPhoneExistence(ctx context.Context, phoneNumber string) (bool, error) {
	row := q.db.QueryRow(ctx, checkPhoneExistence, phoneNumber)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    name, phone_number
) VALUES (
    $1, $2
)
`

type CreateUserParams struct {
	Name        string
	PhoneNumber string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Name, arg.PhoneNumber)
	return err
}

const getOTP = `-- name: GetOTP :one
SELECT otp, otp_expiration_time FROM users
WHERE phone_number = $1
`

type GetOTPRow struct {
	Otp               pgtype.Text
	OtpExpirationTime pgtype.Timestamp
}

func (q *Queries) GetOTP(ctx context.Context, phoneNumber string) (GetOTPRow, error) {
	row := q.db.QueryRow(ctx, getOTP, phoneNumber)
	var i GetOTPRow
	err := row.Scan(&i.Otp, &i.OtpExpirationTime)
	return i, err
}

const updateUserOTP = `-- name: UpdateUserOTP :exec
UPDATE users set otp = $2, otp_expiration_time = $3 WHERE phone_number = $1
`

type UpdateUserOTPParams struct {
	PhoneNumber       string
	Otp               pgtype.Text
	OtpExpirationTime pgtype.Timestamp
}

func (q *Queries) UpdateUserOTP(ctx context.Context, arg UpdateUserOTPParams) error {
	_, err := q.db.Exec(ctx, updateUserOTP, arg.PhoneNumber, arg.Otp, arg.OtpExpirationTime)
	return err
}
